import logging
import requests
from bs4 import BeautifulSoup
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Updater, CommandHandler, CallbackQueryHandler, CallbackContext
)

# üîê –ó–ê–ú–ï–ù–ò –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = "7918239240:AAFMiTPq8mut9W1-xmxxi69xoNyHFB_zAoE"

logging.basicConfig(level=logging.INFO)

def fetch_stock(category):
    url = "https://virastisad.ru/stock/"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, "html.parser")

    items = soup.select(f"#{category} .stock__item")
    output = []

    for item in items:
        name = item.select_one(".stock__name").get_text(strip=True)
        count_el = item.select_one(".stock__count")
        count = count_el.get_text(strip=True) if count_el else "0"
        in_stock = "[IN STOCK ‚úÖ]" if "stock__count" in str(count_el) else "[OUT STOCK ‚ùå]"
        emoji = "ü•ï" if category == "seeds" else "‚öôÔ∏è" if category == "gear" else "ü•ö"
        output.append(f"{emoji} <b>{name}</b> {in_stock} [{count}]")

    return "\n".join(output) or "–ü–æ–∫–∞ –ø—É—Å—Ç–æ ‚ùå"

def fetch_weather():
    response = requests.get("https://virastisad.ru/stock/")
    soup = BeautifulSoup(response.text, "html.parser")
    weather_el = soup.select_one(".weather__block")
    if weather_el:
        return f"‚òÅÔ∏è <b>–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞:</b>\n{weather_el.get_text(strip=True)}"
    return "‚ö†Ô∏è –ü–æ–≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

def fetch_zen_event():
    response = requests.get("https://virastisad.ru/stock/")
    soup = BeautifulSoup(response.text, "html.parser")
    block = soup.find("div", class_="event")
    if not block:
        return "‚ùå ZEN –∏–≤–µ–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω."

    active = block.select_one(".event__status")
    if "ACTIVE" in active.text:
        time_left = block.select_one(".event__timer").text.strip()
        return f"‚úÖ <b>ZEN –∏–≤–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω!</b>\nüïí –î–æ –∫–æ–Ω—Ü–∞: {time_left}"
    else:
        next_time = block.select_one(".event__next").text.strip()
        return f"‚ùå ZEN –∏–≤–µ–Ω—Ç –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.\nüìÖ –°–ª–µ–¥—É—é—â–∏–π: {next_time}"

def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üå± STOCK SEED", callback_data='stock_seed')],
        [InlineKeyboardButton("‚öôÔ∏è STOCK GEAR", callback_data='stock_gear')],
        [InlineKeyboardButton("ü•ö EGG STOCK", callback_data='egg_stock')],
        [InlineKeyboardButton("üßò ZEN EVENT", callback_data='zen_menu')],
        [InlineKeyboardButton("‚òÅÔ∏è WEATHER", callback_data='weather')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("üì¶ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)

def handle_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data == "stock_seed":
        query.edit_message_text(fetch_stock("seeds"), parse_mode="HTML")
    elif query.data == "stock_gear":
        query.edit_message_text(fetch_stock("gear"), parse_mode="HTML")
    elif query.data == "egg_stock":
        query.edit_message_text(fetch_stock("eggs"), parse_mode="HTML")
    elif query.data == "weather":
        query.edit_message_text(fetch_weather(), parse_mode="HTML")
    elif query.data == "zen_menu":
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∏–≤–µ–Ω—Ç–∞", callback_data="zen_status")],
            [InlineKeyboardButton("üì¶ –°—Ç–æ–∫ –∏–≤–µ–Ω—Ç–∞", callback_data="zen_stock")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
        ]
        query.edit_message_text("üßò <b>ZEN EVENT –º–µ–Ω—é:</b>", parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data == "zen_status":
        query.edit_message_text(fetch_zen_event(), parse_mode="HTML")
    elif query.data == "zen_stock":
        query.edit_message_text(fetch_stock("zen"), parse_mode="HTML")
    elif query.data == "back_main":
        start(update, context)

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("main", start))
    dp.add_handler(CallbackQueryHandler(handle_callback))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
